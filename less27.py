# Урок 27.
# Пользовательские функции. Часть 2

# именованые аргументы можно менять местами
# именованые аргументы необезательны, если их не передать - то значения по умолчанию
# именованные аргументы всегда! следуют после позиционных

def get_sum(a, b, c=1, d=2):
    return a + b + c + d
print(get_sum(5,6))     #14
print(get_sum(5,6, d=8))     #20

# произвольное количество аргументов
def get_sumka(*args, **kwargs):
    # *args (позиционные) - эти переменные будут преобразованы в КОРТЕЖ
    # **kwargs (именнованые) - эти переменные будут преобразованы в СЛОВАРЬ
    pass

def getik(*args):
    print(args)

getik(22,33,44,55)      #(22, 33, 44, 55) - словарь аргументов

def getik2(**kwargs):
    print(kwargs)

getik2(a=1,b=20,c=30)   #{'a': 1, 'b': 20, 'c': 30}

# комбинирование аргументов
def f(a,b, *args, **kwargs):
    print(a)    #10
    print(b)    #20
    print(args)     #(30, 40)
    print(kwargs)       #{'x': 'test', 'y': 'best'}
f(10,20,30,40, x='test', y='best')

# *args, **kwargs - если их нету - пустые кортеж и словарь

















